# Modern Banking App - Docker Compose Configuration

version: '3.8'

services:
  # Frontend Service (React + Vite)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:3001/api
      - REACT_APP_FIREBASE_API_KEY=${REACT_APP_FIREBASE_API_KEY}
      - REACT_APP_FIREBASE_AUTH_DOMAIN=${REACT_APP_FIREBASE_AUTH_DOMAIN}
      - REACT_APP_FIREBASE_PROJECT_ID=${REACT_APP_FIREBASE_PROJECT_ID}
      - REACT_APP_FIREBASE_STORAGE_BUCKET=${REACT_APP_FIREBASE_STORAGE_BUCKET}
      - REACT_APP_FIREBASE_MESSAGING_SENDER_ID=${REACT_APP_FIREBASE_MESSAGING_SENDER_ID}
      - REACT_APP_FIREBASE_APP_ID=${REACT_APP_FIREBASE_APP_ID}
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - banking-network
    restart: unless-stopped

  # Backend Service (Node.js + Express)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - PORT=3001
      - CORS_ORIGIN=http://localhost:3000
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN}
      - FIREBASE_SERVICE_ACCOUNT_KEY_PATH=${FIREBASE_SERVICE_ACCOUNT_KEY_PATH}
      - DATABASE_URL=${DATABASE_URL}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - STOCK_MARKET_API_KEY=${STOCK_MARKET_API_KEY}
      - STOCK_MARKET_API_URL=${STOCK_MARKET_API_URL}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - PAYPAL_CLIENT_SECRET=${PAYPAL_CLIENT_SECRET}
      - API_RATE_LIMIT=${API_RATE_LIMIT}
      - BCRYPT_ROUNDS=${BCRYPT_ROUNDS}
      - SENTRY_DSN=${SENTRY_DSN}
      - LOG_LEVEL=${LOG_LEVEL}
    volumes:
      - ./backend:/app
      - /app/node_modules
    networks:
      - banking-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Development Database (Optional - for local development)
  # Uncomment if you want to use a local MongoDB instance
  # mongodb:
  #   image: mongo:7.0
  #   ports:
  #     - "27017:27017"
  #   environment:
  #     - MONGO_INITDB_ROOT_USERNAME=admin
  #     - MONGO_INITDB_ROOT_PASSWORD=password
  #     - MONGO_INITDB_DATABASE=modern_banking
  #   volumes:
  #     - mongodb_data:/data/db
  #   networks:
  #     - banking-network
  #   restart: unless-stopped

  # Redis for session management and caching (Optional)
  # redis:
  #   image: redis:7.2-alpine
  #   ports:
  #     - "6379:6379"
  #   volumes:
  #     - redis_data:/data
  #   networks:
  #     - banking-network
  #   restart: unless-stopped
  #   command: redis-server --requirepass ${REDIS_PASSWORD:-defaultpassword}

# Networks
networks:
  banking-network:
    driver: bridge
    name: modern-banking-network

# Volumes (uncomment if using local databases)
# volumes:
#   mongodb_data:
#     driver: local
#   redis_data:
#     driver: local

# Development override file usage:
# docker-compose -f docker-compose.yml -f docker-compose.dev.yml up

# Production usage:
# docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d
